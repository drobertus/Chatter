package com.mechzombie.chatter

import com.mechzombie.chatter.protocol.BaseMessage
import com.mechzombie.chatter.protocol.MessageType
import groovy.json.JsonSlurper;
import org.eclipse.jetty.websocket.api.Session;
//import org.eclipse.jetty.websocket.common.WebSocketSession
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import org.eclipse.jetty.websocket.api.annotations.WebSocket

@WebSocket
public class ChatterWebSocketHandler {

    private static int ID_GEN = 0;

    private Session theSession;
    private String id;
    private String userName
    private RoomListing rl = RoomListingImpl.instance

    @OnWebSocketClose
    public void onClose(int statusCode, String reason) {
        rl.removeSession(userName, id);
        System.out.println("Close: statusCode=" + statusCode + ", reason=" + reason);
    }

    @OnWebSocketError
    public void onError(Throwable t) {
        System.out.println("Error on web socket: " + t.getMessage());
    }

    @OnWebSocketConnect
    public void onConnect(Session session) {
        String address = session.getRemoteAddress().getAddress().getCanonicalHostName();
        System.out.println("Connect: " + session.getRemoteAddress().getAddress());
        this.theSession = session;
        try {
            id = (ID_GEN ++) +"_" + address
            rl.addSession(id, session);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @OnWebSocketMessage
    public void onMessage(String message) {
        System.out.println("Message: " + message);

        def theMsg = BaseMessage.parseMsg(message)



        switch (theMsg.msgType) {
            case MessageType.sentMsg: // "sentMsg":
                def sentTo = theMsg.getMsgParam('sentTo')// value.sentTo
                println ("sending msg  to ${sentTo}")
                def msgBody = theMsg.getMsgParam('msgBody')

                //TODO: re-format the message here
                //get the name of the sender from the session data
                def relayedMsg = BaseMessage.createEmptyBase(MessageType.receiveMsg)
                relayedMsg.setValueParam('sender', userName)
                relayedMsg.setValueParam('message', msgBody)
                    //"{\"msgType\": \"receiveMsg\", \"value\": {\"sender\": \"${id}\", \"message\": \"${msgBody}\"}}"
                try {
                    rl.sendMessageToUser(sentTo, relayedMsg)
                }catch(IOException ioe) {
                    println ioe
                }
                catch(Exception e) {
                    def errMsg = BaseMessage.createEmptyBase(MessageType.error)
                    errMsg.msgVal = e.getMessage()
                    rl.sendMessageToUser(this.theSession, "System", errMsg)
                    //'{"msgType": "error", "value": "' + e.getMessage() + '"}')
                }
                break;

            case MessageType.hello:
                userName = theMsg.getMsgParam('name')
                rl.registerUser(id, this.theSession, theMsg)

            case "disconnect":
                break;
            default:

                break

        }

//        try {
//            theSession.getRemote().sendString("got: " + message);
//        }catch(IOException ioe) {
//            ioe.printStackTrace();
//
//        }
    }
}